from io import BytesIO

from reportlab.lib import colors
from reportlab.lib.enums import TA_RIGHT
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import (Paragraph, SimpleDocTemplate, Spacer, Table,
                                TableStyle)

from medivise.services.medication_service import MedicationService
from medivise.services.user_service import UserService


class ReportService:
    def generate_medication_report(self, user_id):
        medication_data = self.fetch_medication_data(user_id)
        user_data = self.fetch_user_data(user_id)

        user_content = self.generate_user_info(user_data)
        table_content = self.generate_table(medication_data)

        pdf = self.build_pdf(user_content, table_content)

        return pdf

    def fetch_user_data(self, user_id):
        user = UserService().get_user(user_id)
        return user.model_dump(exclude=["id"])

    def insert_newlines(self, input_string, every=4):
        words = input_string.split(" ")
        field_content = "\n".join(
            " ".join(words[i:i+every]) for i in range(0, len(words), every))
        return field_content

    def fetch_medication_data(self, user_id):
        medications = MedicationService().get_medications(user_id)
        data = [
            ["Brand Name", "Generic Name", "Type", "Dosage",
                "Frequency", "Purpose", "Notes"]  # header
        ]
        for medication in medications:
            med = medication.model_dump()
            frequency = '\n'.join(med["frequency"])

            notes = self.insert_newlines(med["notes"], every=3)
            purpose = self.insert_newlines(med["purpose"], every=2)
            generic_name = self.insert_newlines(med["generic_name"], every=1)

            data.append([
                med["brand_name"],
                generic_name,
                med["type"],
                f'{med["strength"]} {med["unit"]}',
                frequency,
                purpose,
                notes
            ])

        return data

    def generate_user_info(self, user_data):
        # Create a list of paragraphs for user info
        user_info = []
        styles = getSampleStyleSheet()
        user_info_style = styles['BodyText']
        user_info_style.fontSize = 12

        for key, value in user_data.items():
            field_name = key.replace("_", " ").capitalize()

            field_content = value if value else "N/A"
            field_content = ', '.join(field_content) if isinstance(
                field_content, list) else field_content

            if key == "height" or key == "weight":
                field_content = f"{field_content} cm" if key == "height" else f"{field_content} kg"

            user_info.append(
                Paragraph(
                    f"<b>{field_name}:</b> {field_content}",
                    user_info_style
                )
            )

        return user_info

    def generate_table(self, medication_data):
        # Create a table with the data
        table = Table(medication_data)

        # Add style to the table
        style = TableStyle([
            # Header row
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor("#73306E")),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            # Non-header rows
            ('VALIGN', (0, 1), (-1, -1), 'MIDDLE'),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor("#f4f4f4")),
            # All cells
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor("#a0a0a0")),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ])
        table.setStyle(style)

        return table

    def build_pdf(self, user_info, table):
        buffer = BytesIO()
        document = SimpleDocTemplate(buffer, pagesize=letter)

        styles = getSampleStyleSheet()

        header_style = styles['Normal']
        header_style.alignment = TA_RIGHT
        header_paragraph = Paragraph("Generated by Medivise", header_style)

        # Title
        title_style = styles['Title']
        title_style.fontSize = 20
        title_style.textColor = colors.HexColor("#73306E")
        title = Paragraph("Medication Details Report", title_style)

        elements = [
            header_paragraph,
            Spacer(1, 30),
            title,
            Spacer(1, 10),
            *user_info,
            Spacer(1, 20),
            table
        ]

        document.build(elements)
        buffer.seek(0)
        return buffer
